shiny::runApp()
?a
shiny::runApp()
library(RCurl)
library(d3Netork)
install.packages('d3Network')
library(d3Netork)
library(d3Network)
# Gather raw JSON formatted data
URL <- "https://raw.github.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
# Convert JSON arrays into data frames
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
# Convert JSON arrays into data frames
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
# Gather raw JSON formatted data
URL <- "https://raw.github.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
URL <- "https://raw.github.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
URL <- "https://raw.githubusercontent.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
summary(MisNodes$group)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
titlePanel
?titlePanel
shiny::runApp()
View(MisLinks)
View(MisNodes)
URL <- "https://raw.github.com/christophergandrud/d3Network/master/JSONdata/flare.json"
Flare <- getURL(URL)
# Convert to list format
Flare <- rjson::fromJSON(Flare)
URL <- "https://raw.githubusercontent.com/christophergandrud/d3Network/master/JSONdata/flare.json"
Flare <- getURL(URL)
# Convert to list format
Flare <- rjson::fromJSON(Flare)
URL <- "https://raw.githubusercontent.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
# Convert JSON arrays into data frames
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
View(MisLinks)
MisNodes$ID <- 1:nrow(MisNodes)
MisNodes <- subset(MisNodes, ID = group)
View(MisNodes)
group <- 1
MisNodes <- subset(MisNodes, ID = group)
View(MisNodes)
MisNodesSub <- subset(MisNodes, ID == group)
group <- 1
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- subset(MisNodes, ID == group)
View(MisNodesSub)
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- subset(MisNodes, group == group)
View(MisNodesSub)
class(MisNodes$group)
group <- 1
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- subset(MisNodes, group == group)
MisNodesSub <- MisNodes[MisNodes$group %in% group]
MisNodesSub <- MisNodes[MisNodes$group %in% group,]
View(MisNodesSub)
View(MisLinks)
MisLinksSub <- MisLinks[MisLinks$source %in% MisNodesSub$ID, ]
View(MisLinksSub)
group <- 7
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- MisNodes[MisNodes$group %in% group, ]
MisLinksSub <- MisLinks[MisLinks$source %in% MisNodesSub$ID, ]
View(MisLinksSub)
MisLinksSub <- MisLinksSub[MisLinksSub$target %in% MisNodesSub$ID, ]
View(MisLinksSub)
group <- 1
# Create individual ID
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- MisNodes[MisNodes$group %in% group, ]
MisLinksSub <- MisLinks[MisLinks$source %in% MisNodesSub$ID, ]
MisLinksSub <- MisLinksSub[MisLinksSub$target %in% MisNodesSub$ID, ]
View(MisLinksSub)
# Create individual ID
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- MisNodes[MisNodes$group %in% group, ]
MisLinksSub <- MisLinks[MisLinks$source %in% MisNodesSub$ID, ]
View(MisLinksSub)
View(MisLinks)
d3ForceNetwork(Links = MisLinksSub, Nodes = MisNodesSub,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9)
d3ForceNetwork(Links = MisLinksSub, Nodes = MisNodesSub,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, file = '~/Desktop/Test.html')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
URL <- "https://raw.githubusercontent.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
# Convert JSON arrays into data frames
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
MisNodes$ID <- 1:nrow(MisNodes)
shiny::runApp()
?d3ForceNetwork
shiny::runApp()
shiny::runApp()
?cat
shiny::runApp()
shiny::runApp()
install.packages("rCharts")
install.packages("rCharts")
install_github("rCharts", "ramnathv")
devtools::install_github("rCharts", "ramnathv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Gather raw JSON formatted data
URL <- "https://raw.githubusercontent.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
# Convert JSON arrays into data frames
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
# Subset nodes
if (input$group == 'All Groups')
group <- 1
# Create individual ID
MisNodes$ID <- 1:nrow(MisNodes)
MisNodesSub <- MisNodes[MisNodes$group %in% group, ]
MisLinksSub <- MisLinks[MisLinks$source %in% MisNodesSub$ID, ]
MisLinksSub <- MisLinksSub[MisLinksSub$target %in% MisNodesSub$ID, ]
d3ForceNetwork(Links = MisLinksSub, Nodes = MisNodesSub,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, file = '~/Desktop/Test.html')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?d3ForceNetwork
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renderPrint
capture.output
?capture.output
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?capture.output
?sink
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sink
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renderUI
?outputHTML
?htmlOutput
?renderUI
shiny::runApp()
shiny::runApp()
outputOptions(output)
shiny::runApp()
shiny::runApp()
shiny::runApp()
subNodes <-reactive({
if (input$group == 10){
return(MisNodes)
}
else if (input$group != 10){
# Subset
MisNodesSub <- MisNodes[MisNodes$group %in%
input$group, ]
return(MisNodesSub)
}
})
subLinks <- reactive({
if (input$group == 10){
return(MisLinks)
}
else if (input$group != 10){
keepers <- subNodes()
# Subset
MisLinksSub <- MisLinks[MisLinks$source %in%
keepers$ID, ]
MisLinksSub <- MisLinksSub[MisLinksSub$target %in%
keepers$ID, ]
}
})
renderUI({
capture.output(
d3ForceNetwork(Nodes = subNodes(),
Links = subLinks(),
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, standAlone = FALSE)
)
})
shiny::runApp()
shiny::runApp()
htmlOutput
library('rcharts')
library('rCharts')
showOutput
showHTML
htmlOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?HTML
HTML
shiny::runApp()
shiny::runApp()
div
shiny::runApp()
textOutput
shiny::runApp()
container
?mainpanel
?mainPanel
?mainPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?includeScript
shiny::runApp()
library('rCharts')
?showOutput
showOutput
renderChart
renderUi
renderUI
renderPrint
?mainPanel
shiny::runApp()
shiny::runGitHub('d3ShinyExample', 'christophergandrud')
